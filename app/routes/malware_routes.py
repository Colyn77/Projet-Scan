import os
import hashlib
import zipfile
from flask import Blueprint, render_template, request, redirect, url_for, session
from werkzeug.utils import secure_filename
from datetime import datetime
from app.securite.chiffrement_module import encrypt_file
from app.securite.auth import login_required

malware_bp = Blueprint("malware", __name__)

@malware_bp.route("/malware", methods=["GET", "POST"])
@login_required
def analyse_malware():
    if request.method == "POST":
        uploaded = request.files.get("fichier")
        if not uploaded or uploaded.filename == "":
            return render_template("malware.html", error="Aucun fichier fourni.")

        # Pr√©paration
        username = session.get("username", "inconnu")
        horodatage = datetime.now().strftime("%Y%m%d_%H%M%S")
        base = f"{username}_{horodatage}"
        os.makedirs("malware/uploads", exist_ok=True)
        os.makedirs("malware/archives", exist_ok=True)

        # Enregistrement du fichier
        path_file = os.path.join("malware/uploads", secure_filename(uploaded.filename))
        uploaded.save(path_file)

        # Analyse
        result = analyse_fichier(path_file)

        # Sauvegarde rapport
        rapport_txt = f"malware/{base}.txt"
        with open(rapport_txt, "w") as f:
            f.write(result)

        rapport_enc = f"malware/{base}.encrypted"
        encrypt_file(rapport_txt, rapport_enc)

        # Archivage
        archive_path = f"malware/archives/{base}.zip"
        with zipfile.ZipFile(archive_path, "w") as zipf:
            zipf.write(path_file)
            zipf.write(rapport_txt)
            zipf.write(rapport_enc)

        return render_template("results.html", title="Analyse de fichier malveillant", result=result.split("\n"), file_link="/" + archive_path)

    return render_template("malware.html")

def analyse_fichier(path):
    name = os.path.basename(path)
    ext = os.path.splitext(name)[1].lower()
    size = os.path.getsize(path)
    with open(path, "rb") as f:
        content = f.read()
    md5 = hashlib.md5(content).hexdigest()
    sha256 = hashlib.sha256(content).hexdigest()

    suspects = [".exe", ".bat", ".vbs", ".dll", ".ps1", "payload", "ransom", "keylogger"]
    flag = any(s in name.lower() or ext in suspects for s in suspects)

    lignes = [
        f"üìÑ Fichier : {name}",
        f"üì¶ Taille : {size} octets",
        f"üîí MD5     : {md5}",
        f"üîê SHA256  : {sha256}",
        f"üìÅ Extension : {ext or 'inconnue'}",
        "",
        f"{'üö® Fichier potentiellement malveillant' if flag else '‚úÖ Aucun comportement suspect d√©tect√©'}"
    ]
    return "\n".join(lignes)

@malware_bp.route("/", methods=["GET"])
def malware_bp_home():
    return render_template("malware.html")
