# routes/post_exploit_routes.py

from flask import Blueprint, request, jsonify, render_template, abort
from services import post_exploit
from utils.logger import get_logger
from securite.auth import login_required
import json

# Configuration du logger
logger = get_logger('post_exploit_routes')

post_exploit_bp = Blueprint('post_exploit', __name__)

@post_exploit_bp.route("/system_info", methods=["GET"])
@login_required
def get_system_info():
    """Récupère les informations système"""
    logger.info("Demande des informations système")
    
    try:
        target_ip = request.args.get("target_ip", None)
        info = post_exploit.get_system_info()
        
        if request.headers.get("Accept") == "application/json":
            return jsonify(info)
        else:
            return render_template("post_exploit_system.html", info=info, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de la récupération des infos système: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/network_info", methods=["GET"])
@login_required
def get_network_info():
    """Récupère les informations réseau"""
    logger.info("Demande des informations réseau")
    
    try:
        target_ip = request.args.get("target_ip", None)
        info = post_exploit.get_network_info()
        
        if request.headers.get("Accept") == "application/json":
            return jsonify(info)
        else:
            return render_template("post_exploit_network.html", info=info, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de la récupération des infos réseau: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/users", methods=["GET"])
@login_required
def get_users_info():
    """Récupère les informations sur les utilisateurs"""
    logger.info("Demande des informations sur les utilisateurs")
    
    try:
        target_ip = request.args.get("target_ip", None)
        current_user = post_exploit.get_current_user()
        logged_users = post_exploit.get_logged_in_users()
        
        user_info = {
            "current_user": current_user,
            "logged_users": logged_users
        }
        
        if request.headers.get("Accept") == "application/json":
            return jsonify(user_info)
        else:
            return render_template("post_exploit_users.html", info=user_info, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de la récupération des infos utilisateurs: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/processes", methods=["GET"])
@login_required
def get_processes():
    """Récupère la liste des processus en cours d'exécution"""
    logger.info("Demande de la liste des processus")
    
    try:
        target_ip = request.args.get("target_ip", None)
        processes = post_exploit.get_process_list()
        
        if request.headers.get("Accept") == "application/json":
            return jsonify({"processes": processes})
        else:
            return render_template("post_exploit_processes.html", processes=processes, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de la récupération des processus: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/command", methods=["POST"])
@login_required
def execute_command():
    """Exécute une commande sur le système cible"""
    logger.info("Demande d'exécution d'une commande")
    
    try:
        if request.is_json:
            data = request.get_json()
        else:
            data = request.form
            
        command = data.get("command")
        target_ip = data.get("target_ip")
        
        if not command:
            logger.warning("Commande non spécifiée")
            return jsonify({"error": "Commande non spécifiée"}), 400
            
        result = post_exploit.execute_command(command, target_ip)
        
        if request.is_json or request.headers.get("Accept") == "application/json":
            return jsonify(result)
        else:
            return render_template("post_exploit_command.html", result=result, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de l'exécution de la commande: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/files", methods=["GET", "POST"])
@login_required
def file_operations():
    """Opérations sur les fichiers"""
    logger.info("Demande d'opération sur les fichiers")
    
    try:
        if request.method == "GET":
            # Lister ou lire des fichiers
            operation = request.args.get("operation", "list")
            path = request.args.get("path", "/")
            target_ip = request.args.get("target_ip")
            
            result = post_exploit.file_operations(operation, path, target_ip=target_ip)
            
            if request.headers.get("Accept") == "application/json":
                return jsonify(result)
            else:
                return render_template("post_exploit_files.html", result=result, operation=operation, path=path, target_ip=target_ip)
                
        else:  # POST
            # Écrire un fichier
            if request.is_json:
                data = request.get_json()
            else:
                data = request.form
                
            operation = data.get("operation", "write")
            path = data.get("path")
            content = data.get("content")
            target_ip = data.get("target_ip")
            
            if not path:
                logger.warning("Chemin non spécifié")
                return jsonify({"error": "Chemin non spécifié"}), 400
                
            result = post_exploit.file_operations(operation, path, content, target_ip)
            
            if request.is_json or request.headers.get("Accept") == "application/json":
                return jsonify(result)
            else:
                return render_template("post_exploit_files.html", result=result, operation=operation, path=path, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de l'opération sur les fichiers: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/persistence", methods=["POST"])
@login_required
def establish_persistence():
    """Établir la persistance sur le système cible"""
    logger.info("Demande d'établissement de persistance")
    
    try:
        if request.is_json:
            data = request.get_json()
        else:
            data = request.form
            
        method = data.get("method", "crontab")
        target_ip = data.get("target_ip")
        
        result = post_exploit.establish_persistence(method, target_ip)
        
        if request.is_json or request.headers.get("Accept") == "application/json":
            return jsonify(result)
        else:
            return render_template("post_exploit_persistence.html", result=result, target_ip=target_ip)
    except Exception as e:
        logger.error(f"Erreur lors de l'établissement de persistance: {e}")
        return jsonify({"error": str(e)}), 500

@post_exploit_bp.route("/dashboard", methods=["GET"])
@login_required
def dashboard():
    """Tableau de bord de post-exploitation"""
    logger.info("Accès au tableau de bord de post-exploitation")
    
    try:
        target_ip = request.args.get("target_ip")
        session_id = request.args.get("session_id")
        
        if not target_ip:
            logger.warning("IP cible non spécifiée pour le tableau de bord")
            return render_template("post_exploit_error.html", error="IP cible non spécifiée")
            
        # Récupérer des informations de base pour le tableau de bord
        system_info = post_exploit.get_system_info()
        user_info = {
            "current_user": post_exploit.get_current_user(),
            "logged_users": post_exploit.get_logged_in_users()
        }
        
        return render_template("post_exploit_dashboard.html", 
                              system_info=system_info,
                              user_info=user_info,
                              target_ip=target_ip,
                              session_id=session_id)
    except Exception as e:
        logger.error(f"Erreur lors de l'accès au tableau de bord: {e}")
        return render_template("post_exploit_error.html", error=str(e))