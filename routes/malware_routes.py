import os
import re
import hashlib
import zipfile
import requests
import time
from flask import Blueprint, render_template, request, session
from werkzeug.utils import secure_filename
from datetime import datetime
from securite.chiffrement_module import encrypt_file
from securite.auth import login_required
from dotenv import load_dotenv

# Charger la clé API depuis .env
load_dotenv()
VT_API_KEY = os.getenv("VT_API_KEY")
if not VT_API_KEY:
    raise RuntimeError(
        "La variable d'environnement VT_API_KEY n'est pas définie. "
        "Ajoutez-la dans votre fichier .env ou exportez-la dans votre shell."
    )

malware_bp = Blueprint("malware", __name__)

# Regex basique pour valider une URL HTTP/HTTPS
URL_REGEX = re.compile(r'^(https?://\S+)$', re.IGNORECASE)


@malware_bp.route("/malware", methods=["GET", "POST"])
@login_required
def analyse_malware():
    if request.method == "POST":
        uploaded = request.files.get("fichier")
        url = request.form.get("url", "").strip()

        # Nécessite un fichier ou une URL
        if not (uploaded and uploaded.filename) and not url:
            return render_template("malware.html", error="Fournissez un fichier ou une URL.")

        # Préparation des répertoires et nom de base
        username = session.get("username", "inconnu")
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        base = f"{username}_{ts}"
        os.makedirs("malware/uploads", exist_ok=True)
        os.makedirs("malware/archives", exist_ok=True)

        # Cas : fichier uploadé
        if uploaded and uploaded.filename:
            filename = secure_filename(uploaded.filename)
            path_file = os.path.join("malware/uploads", filename)
            uploaded.save(path_file)
            header = f"📄 Fichier : {filename}"
            vt_summary, vt_score = vt_scan_file(path_file)

        # Cas : URL
        else:
            if not URL_REGEX.match(url):
                return render_template("malware.html", error="URL invalide.")
            header = f"🌐 URL     : {url}"
            vt_summary, vt_score = vt_scan_url(url)

        # Construction du rapport final
        report_lines = [
            header,
            "=== VirusTotal ===",
            vt_summary,
            f"🎯 Score VT (malicious/total): {vt_score}"
        ]

        # Sauvegarde rapport texte
        rapport_txt = f"malware/{base}.txt"
        with open(rapport_txt, "w", encoding="utf-8") as f:
            f.write("\n".join(report_lines))

        # Chiffrement du rapport
        rapport_enc = f"malware/{base}.encrypted"
        encrypt_file(rapport_txt, rapport_enc)

        # Création de l’archive
        archive_path = f"malware/archives/{base}.zip"
        with zipfile.ZipFile(archive_path, "w") as z:
            if uploaded and uploaded.filename:
                z.write(path_file, arcname=filename)
            z.write(rapport_txt, arcname=os.path.basename(rapport_txt))
            z.write(rapport_enc, arcname=os.path.basename(rapport_enc))

        # Affichage des résultats
        return render_template(
            "results.html",
            title="Résultats VirusTotal",
            result=report_lines,
            file_link="/" + archive_path
        )

    return render_template("malware.html")


def vt_scan_file(path: str) -> tuple[str, str]:
    sha256_hash = hashlib.sha256(open(path, "rb").read()).hexdigest()
    headers = {"x-apikey": VT_API_KEY}
    url_file = f"https://www.virustotal.com/api/v3/files/{sha256_hash}"

    resp = requests.get(url_file, headers=headers)
    if resp.status_code == 404:
        files = {"file": (os.path.basename(path), open(path, "rb"))}
        up = requests.post("https://www.virustotal.com/api/v3/files", headers=headers, files=files)
        if up.status_code not in (200, 201):
            return (f"❌ VT upload error {up.status_code}", "0/0")
        # Attente que l’analyse soit prête
        for _ in range(10):  # max 10 essais = ~30s
            time.sleep(3)
            resp = requests.get(url_file, headers=headers)
            if resp.status_code == 200:
                break

    if resp.status_code != 200:
        return (f"❌ VT file report error {resp.status_code}", "0/0")

    stats = resp.json()["data"]["attributes"].get("last_analysis_stats", {})
    total = sum(stats.values())
    mal = stats.get("malicious", 0) + stats.get("suspicious", 0)
    summary = " | ".join(f"{k}:{v}" for k, v in stats.items())
    score = f"{mal}/{total}"
    return (summary, score)



def vt_scan_url(url: str) -> tuple[str, str]:
    headers = {"x-apikey": VT_API_KEY}
    submit = requests.post(
        "https://www.virustotal.com/api/v3/urls",
        headers={**headers, "Content-Type": "application/x-www-form-urlencoded"},
        data=f"url={url}"
    )
    if submit.status_code not in (200, 201):
        return (f"❌ VT URL upload error {submit.status_code}", "0/0")

    analysis_id = submit.json()["data"]["id"]

    # Boucle de polling (max 10 essais = ~30s)
    for _ in range(10):
        time.sleep(3)
        check = requests.get(
            f"https://www.virustotal.com/api/v3/analyses/{analysis_id}",
            headers=headers
        )
        if check.status_code == 200 and check.json()["data"]["attributes"]["status"] == "completed":
            break

    if check.status_code != 200:
        return (f"❌ VT URL report error {check.status_code}", "0/0")

    stats = check.json()["data"]["attributes"].get("stats", {})
    total = sum(stats.values())
    mal = stats.get("malicious", 0) + stats.get("suspicious", 0)
    summary = " | ".join(f"{k}:{v}" for k, v in stats.items())
    score = f"{mal}/{total}"
    return (summary, score)
